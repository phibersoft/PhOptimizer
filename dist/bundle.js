#!/usr/bin/env node
(()=>{"use strict";var e={877:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.colored=void 0,t.colored=(e,t="info")=>`${{info:"[36m%s[0m",error:"[31m%s[0m",success:"[32m%s[0m"}[t]}${e}[0m`},915:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var r=Object.getOwnPropertyDescriptor(t,i);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,r)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),r=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||o(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),r(i(877),t),r(i(162),t),r(i(214),t)},162:function(e,t,i){var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(r,n){function a(e){try{c(o.next(e))}catch(e){n(e)}}function s(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,s)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.optimizer=void 0;const r=i(12);t.optimizer=(e,t,i,n,a=r.AUTO,s=80)=>o(void 0,void 0,void 0,(function*(){const o=yield(0,r.read)(e);if(yield o.contain(n,a),yield o.quality(s),i)yield o.writeAsync(`${e}\\${t}`);else{const i=t.split("."),r=i.slice(0,i.length-1).join("."),n=i[i.length-1];yield o.writeAsync(`${e}\\${r}-optimized.${n}`)}}))},214:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=i(877);process.on("uncaughtException",(e=>{console.log((0,o.colored)(e.message,"error"))}))},519:function(e,t,i){var o=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))((function(r,n){function a(e){try{c(o.next(e))}catch(e){n(e)}}function s(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,s)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),i(214);const r=i(12),n=i(515),a=i(521),s=i(955),c=i(147),u=i(915),l=i(461),d=new n.ArgumentParser({description:"Phoptimizator is a simple image optimizator from -cli."}),p=(0,a.createInterface)({input:process.stdin,output:process.stdout}),f=["jpg","jpeg","png","tif","gif","bmp"];d.add_argument("-v","--version",{action:"version",version:i(598).i8}),d.add_argument("-f","--file",{help:"Image name on current path. Example: xxx.jpg",default:"ALL"}),d.add_argument("-p","--path",{help:"Image path destination. Default: process.cwd()",default:process.cwd()}),d.add_argument("-q","--quality",{help:"Image quality. Default: 70",default:70}),d.add_argument("-he","--height",{help:"Image height. Default: AUTO",default:r.AUTO}),d.add_argument("-w","--width",{help:"Image width. Default: 1920",default:1920}),d.add_argument("-o","--overwrite",{help:"Overwrite. If you set this option, optimized image overwrites original file with same name.",default:!1});const h=d.parse_args();o(void 0,void 0,void 0,(function*(){const e=Object.keys(h).reduce(((e,t)=>e+`${t}: ${h[t]}\n`),"Options: \n")+"\nAre you sure you want to continue? (y/n)";p.question(e,(e=>o(void 0,void 0,void 0,(function*(){if("y"===e.toLowerCase()){let e=[];"ALL"===h.file?e=(yield c.promises.readdir(h.path)).filter((e=>{const t=e.split("."),i=t[t.length-1];return f.includes(i)})):e.push(h.file);const t=s.default.dots;let i=0;const o=setInterval((()=>{const{frames:e}=t;l(e[i=++i%e.length])}),t.interval);for(const t of e)yield(0,u.optimizer)(h.path,t,h.overwrite,h.width,h.height,h.quality);clearInterval(o),l((0,u.colored)("Optimization completed!","success"))}else l((0,u.colored)("Optimization canceled!","error")),process.exit(13)}))))}))},515:e=>{e.exports=require("argparse")},955:e=>{e.exports=require("cli-spinners")},12:e=>{e.exports=require("jimp")},461:e=>{e.exports=require("log-update")},147:e=>{e.exports=require("fs")},521:e=>{e.exports=require("readline")},598:e=>{e.exports={i8:"2.0.0"}}},t={};!function i(o){var r=t[o];if(void 0!==r)return r.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,i),n.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,