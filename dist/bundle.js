#!/usr/bin/env node
(()=>{"use strict";var e={519:function(e,t,i){var r=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(o,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=i(12),n=i(515),s=i(189),a=i(22),l=i(955),c=i(147),d=i(461),u=new n.ArgumentParser({description:"Phoptimizator is a simple image optimizator from -cli."});u.add_argument("-v","--version",{action:"version",version:i(598).i8}),u.add_argument("-f","--file",{help:"Image name on current path. Example: xxx.jpg",default:"ALL"}),u.add_argument("-p","--path",{help:"Image path destination. Default: process.cwd()",default:process.cwd()}),u.add_argument("-q","--quality",{help:"Image quality. Default: 70",default:70}),u.add_argument("-he","--height",{help:"Image height. Default: AUTO",default:o.AUTO}),u.add_argument("-w","--width",{help:"Image width. Default: 1920",default:1920}),u.add_argument("-o","--overwrite",{help:"Overwrite. If you set this option, optimized image overwrites original file with same name.",default:!1});const p=u.parse_args(),h=["jpg","jpeg","png","tif","gif","bmp"],f=(e,t,i,n,s=o.AUTO,a)=>r(void 0,void 0,void 0,(function*(){var r=yield o.read(`${e}\\${t}`),l=s===o.AUTO?o.AUTO:Number(s);if(yield r.resize(n,l),yield r.quality(a),!1===i){const i=t.split("."),o=i.slice(0,i.length-1).join("."),n=`${e}\\${o}_optimized.jpeg`;yield r.writeAsync(n)}else yield r.writeAsync(`${e}\\${t}`)})),g=e=>{console.log(["\n",a.redBright(e),"\n"].join("")),process.exit()};r(void 0,void 0,void 0,(function*(){try{var e="Options: \n";e+=Object.keys(p).map((e=>a.cyanBright(`${e} = ${p[e]}`))).join("\n"),e+="\nDo you confirm (y/n)? ";const t=(0,s.createInterface)({input:process.stdin,output:process.stdout});t.question(e,(e=>r(void 0,void 0,void 0,(function*(){if("y"==e||"Y"===e)if("ALL"===p.file)c.readdir(p.path,((e,i)=>r(void 0,void 0,void 0,(function*(){for(var e=[],o=0;o<i.length;o++){const t=i[o],r=t.split("."),n=r[r.length-1];h.includes(n)&&e.push(t)}0===e.length&&g(`No files found with type: ${h.join(",")}`);const n="\nFiles:\n"+a.blueBright(e.join("\n"))+"\nDo you confirm(y/n)? ";t.question(n,(t=>r(void 0,void 0,void 0,(function*(){if(t.startsWith("y")||t.startsWith("Y")){const t=l.default.dots;let r=0;for(var i=0;i<e.length;i++){const o=e[i],n=` Optimizing (${i+1}/${e.length}) : ${o}`,s=setInterval((()=>{const{frames:e}=t;d(e[r=++r%e.length]+a.yellowBright(n))}),t.interval);yield f(p.path,o,p.overwrite,Number(p.width),p.height,Number(p.quality)),clearInterval(s)}console.log(a.greenBright("Process finished.")),process.exit(1)}else g("User cancelled process")}))))}))));else{const e=l.default.dots;let t=0;const i=setInterval((()=>{const{frames:i}=e;d(i[t=++t%i.length]+`Optimizing ${a.yellowBright(p.file)}`)}),e.interval);yield f(p.path,p.file,p.overwrite,Number(p.width),p.height,Number(p.quality)),clearInterval(i),console.log(a.greenBright("Process finished.")),process.exit()}else g("User cancelled process.")}))))}catch(e){console.log(a.redBright(`Unexpected Error: ${e.message}`)),process.exit(1)}}))},515:e=>{e.exports=require("argparse")},22:e=>{e.exports=require("chalk")},955:e=>{e.exports=require("cli-spinners")},12:e=>{e.exports=require("jimp")},461:e=>{e.exports=require("log-update")},189:e=>{e.exports=require("readline")},147:e=>{e.exports=require("fs")},598:e=>{e.exports={i8:"1.0.0"}}},t={};!function i(r){var o=t[r];if(void 0!==o)return o.exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,i),n.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,