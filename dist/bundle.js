#!/usr/bin/env node
(()=>{"use strict";var e={877:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.colored=void 0,t.colored=(e,t="info")=>`${{info:"[36m",error:"[31m",success:"[32m"}[t]}${e}[0m`},915:function(e,t,o){var i=this&&this.__createBinding||(Object.create?function(e,t,o,i){void 0===i&&(i=o);var r=Object.getOwnPropertyDescriptor(t,o);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,i,r)}:function(e,t,o,i){void 0===i&&(i=o),e[i]=t[o]}),r=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||i(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),r(o(877),t),r(o(162),t),r(o(214),t)},162:function(e,t,o){var i=this&&this.__awaiter||function(e,t,o,i){return new(o||(o=Promise))((function(r,n){function a(e){try{s(i.next(e))}catch(e){n(e)}}function c(e){try{s(i.throw(e))}catch(e){n(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,c)}s((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.optimizer=void 0;const r=o(12);t.optimizer=(e,t,o,n,a=r.AUTO,c=80)=>i(void 0,void 0,void 0,(function*(){const i=`${e}\\${t}`,s=yield(0,r.read)(i);if(yield s.contain(n,a),yield s.quality(c),o)yield s.writeAsync(i);else{const o=t.split("."),i=o.slice(0,o.length-1).join("."),r=o[o.length-1];yield s.writeAsync(`${e}\\${i}-optimized.${r}`)}}))},214:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=o(877);process.on("uncaughtException",((e,t)=>{console.log((0,i.colored)(e.message,"error")),console.log((0,i.colored)(t,"error"))}))},519:function(e,t,o){var i=this&&this.__awaiter||function(e,t,o,i){return new(o||(o=Promise))((function(r,n){function a(e){try{s(i.next(e))}catch(e){n(e)}}function c(e){try{s(i.throw(e))}catch(e){n(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,c)}s((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=o(515),n=o(147),a=o(12),c=o(521),s=o(915);o(214);const u=new r.ArgumentParser({description:"Phoptimizator is a simple image optimizator from -cli."}),l=(0,c.createInterface)({input:process.stdin,output:process.stdout}),d=["jpg","jpeg","png","tif","gif","bmp"];u.add_argument("-v","--version",{action:"version",version:o(598).i8}),u.add_argument("-f","--file",{help:"Image name on current path. Example: xxx.jpg",default:"ALL"}),u.add_argument("-p","--path",{help:"Image path destination. Default: process.cwd()",default:process.cwd()}),u.add_argument("-q","--quality",{help:"Image quality. Default: 70",default:70}),u.add_argument("-he","--height",{help:"Image height. Default: AUTO",default:a.AUTO}),u.add_argument("-w","--width",{help:"Image width. Default: 1920",default:1920}),u.add_argument("-o","--overwrite",{help:"Overwrite. If you set this option, optimized image overwrites original file with same name.",default:!1});const p=u.parse_args();i(void 0,void 0,void 0,(function*(){const e=Object.keys(p).reduce(((e,t)=>e+`${t}: ${p[t]}\n`),"Options: \n")+"\nAre you sure you want to continue? (y/n)";l.question(e,(e=>i(void 0,void 0,void 0,(function*(){if("y"===e.toLowerCase()){let e=[];"ALL"===p.file?(e=(yield n.promises.readdir(p.path)).filter((e=>{const t=e.split("."),o=t[t.length-1];return d.includes(o)})),console.log(e)):e.push(p.file);for(let t=0;t<e.length;t++){const o=e[t];console.log((0,s.colored)(`Optimizing ${o}... [${t+1}/${e.length}]`,"info")),yield(0,s.optimizer)(p.path,o,p.overwrite,"number"==typeof p.width?p.width:Number(p.width),"number"==typeof p.height?p.height:Number(p.height),"number"==typeof p.quality?p.quality:Number(p.quality))}console.log((0,s.colored)("Optimization completed!","success")),process.exit(5)}else console.log((0,s.colored)("Optimization canceled!","error")),process.exit(13)}))))}))},515:e=>{e.exports=require("argparse")},12:e=>{e.exports=require("jimp")},147:e=>{e.exports=require("fs")},521:e=>{e.exports=require("readline")},598:e=>{e.exports={i8:"2.5.8"}}},t={};!function o(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i].call(n.exports,n,n.exports,o),n.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,